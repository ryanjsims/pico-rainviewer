from PIL.BdfFontFile import BdfFontFile
import numpy

autogenerated_blurb = """
#pragma once
// AUTOGENERATED FILE - DO NOT EDIT MANUALLY
//
// This file is generated from a 4 by 6 bitmap font file found in scripts/
// To change the font used, load your own font file there and run convert_bdf.py
// from the scripts directory.

"""

def ones_to_byte(row: numpy.ndarray) -> str:
    assert(0 < row.size <= 8)
    total = ''
    for i in range(len(row)):
        total += str(int(row[i]))
    return total

f = open("4x6.bdf", "rb")
with open("../include/font.h", "w") as out:
    bdf_file = BdfFontFile(f)
    bdf_file.compile()

    _, displacements, bounding_box, image = bdf_file[ord('A')]
    array = numpy.array(image.convert('L')) / 255

    out.write(autogenerated_blurb)
    out.write(f"#define FONT_WIDTH {len(array[0])}\n")
    out.write(f"#define FONT_HEIGHT {len(array)}\n")
    out.write(f"#define FONT_LEFT {displacements[0]}\n")
    out.write(f"#define FONT_TOP {displacements[1]}\n\n")
    out.write(f"#define FONT_RIGHT {displacements[2]}\n")
    out.write(f"#define FONT_BOTTOM {displacements[3]}\n\n")
    out.write(f"const char font[256][{len(array)}] = {{\n")
    for i in range(255):
        if chr(i).isprintable():
            _, __, bounding_box, image = bdf_file[i]
            array = numpy.array(image.convert('L')) / 255
            out.write(f"    // '{chr(i)}'\n")
            out.write(f"    {{\n")
            for j in range(len(array)):
                out.write(f"        0b{ones_to_byte(array[j])},\n")
            out.write(f"    }},\n")
        else:
            out.write(f"    // '\\x{i:02x}' - not printable\n")
            out.write(f"    {{\n")
            for j in range(len(array)):
                out.write(f"        0b0000,\n")
            out.write(f"    }},\n")
    out.write("};\n")
    f.close()