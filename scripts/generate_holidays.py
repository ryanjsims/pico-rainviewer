from datetime import date
import holidays

autogenerated_blurb = """
#pragma once
// This file is autogenerated by scripts/generate_holidays.py, do not modify manually.
// If you would like to adjust the holidays that are included in this file, modify the python script.

#include <optional>
#include <stdint.h>
#include <string>
#include <unordered_map>

#define HOLIDAY_MIN_YEAR {}
#define HOLIDAY_MAX_YEAR {}

"""

holiday_getter = """
std::optional<std::string> get_holiday(uint16_t year, uint8_t month, uint8_t day) {
    if(year > HOLIDAY_MAX_YEAR || year < HOLIDAY_MIN_YEAR) {
        return {};
    }
    char date[16];
    sprintf(date, "%d-%02d-%02d", year, month, day);

    if(holiday_map.find(std::string(date)) == holiday_map.end()) {
        return {};
    }
    return holiday_map.at(std::string(date));
}
"""

def generate_holidays(included_holidays: holidays.HolidayBase):
    with open("../include/holidays.h", "w") as out:
        out.write(autogenerated_blurb.format(min(included_holidays.years), max(included_holidays.years)))
        out.write("const std::unordered_map<std::string, std::string> holiday_map = std::unordered_map<std::string, std::string> {\n")
        for day, holiday in included_holidays.items():
            out.write(f'    {{"{day.year}-{day.month:02d}-{day.day:02d}", "{holiday}"}},\n')
        out.write("};\n\n")
        out.write(holiday_getter)


generate_holidays(holidays.country_holidays("US", subdiv="AZ", years=range(2023, 2030)) + holidays.country_holidays("CA", years=range(2023, 2030)) + holidays.country_holidays("MX", years=range(2023, 2030)) + holidays.country_holidays("IN", years=range(2023, 2030)))

